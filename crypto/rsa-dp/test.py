# p=10618281410923416925050933744969385680165939364171537534673575974951068803144936061296406114080858858122753107949439558568042458880912422217557045236945583
# q=11476187473431567937614063792731358223631114099354793995450955542616124723720732223669390537274866221267514608949014589608912807830172925500705397743266193


from Crypto.Util.number import getPrime, bytes_to_long,long_to_bytes
from math import gcd
import os

l = 512
e = 65537
while True:
    p = 10618281410923416925050933744969385680165939364171537534673575974951068803144936061296406114080858858122753107949439558568042458880912422217557045236945583
    q = 11476187473431567937614063792731358223631114099354793995450955542616124723720732223669390537274866221267514608949014589608912807830172925500705397743266193
    N = p * q
    phi = (p - 1) * (q - 1)
    if p != q and gcd(phi, e) == 1:
        break
d = pow(e, -1, phi)
flag = 'flag{' + os.urandom(16).hex() + '}'
# with open('flag.txt', 'w') as f:
#     f.write(flag)
# m = bytes_to_long(flag.encode() + os.urandom(l * 2 // 8 - 1 - len(flag)))
# c = pow(m, e, N)
c = 8780612182038656937857035414166946879298623142039640096040977540718438165370157237338302285883434510468327624639018641021172539014877422031314515930970279832790951915544472623481082579929897879367485712677847440593729272925298208117351333638909404072499926132594202194824669932318984932899390873831186165656
m=pow(c,d,N)
c2=pow(m,e,N)
# print(c)
# print(c2)
mb=long_to_bytes(m)[:-(l * 2 // 8 - 1 - len(flag))]
print(mb)
print(mb.decode())
dp = d % (p - 1)
with open('output3.txt', 'w') as f:
    f.write('N = ' + str(N) + '\n')
    f.write('e = ' + str(e) + '\n')
    f.write('c = ' + str(c) + '\n')
    f.write('dp = ' + str(dp) + '\n')
    