n=107847645025513535850791225440130707186374273414737521825714442885442542984529827092766916748308266623066053421754530398675086374798530909982183476265477598220972320436343536618913608933549054793948336438240303192183575843300257235195070331758555882832698815894168120103459360566404203412796086643598204242029
p_q=1505246122706281178983443268987790509406564031452059494152554645294649335244676839890
c=16589212605025468264862689939961340646400626438824064459026078002373801735937861932598660491280834517490394340315480853421268981930217857435669572426110105938015092688880859031418213297139875807487434491329423279700179082306961439610731922669459168752958192842026918421354512654494583087220572962719510130677

from Crypto.Util.number import *
BITS=233

e = 0x10001

print(e)

# print(((p_q<<233)*(p_q<<233))-4*n)

import math

for i in range(1<<100):
    phi=n-((p_q<<BITS) + i)+1
    # d=pow(e,-1,phi)
    b=n-phi+1
    delta=(b*b-4*n)
    # if delta<0:
    #     continue
    sqrtdelta=math.isqrt(delta)
    if sqrtdelta*sqrtdelta!=delta:
        continue
    
    pi=(b+sqrtdelta)/2
    qi=(b-sqrtdelta)/2
    # print(i,delta,sqrtdelta,phi,pi,qi)
    # print(delta)
    # print(sqrtdelta*sqrtdelta)
    if pi<=0 and qi<=0:
        continue
    if abs(pi-int(pi))<=0.0000001 and abs(qi-int(qi))<=0.0000001:
        print(pi,qi)
    # print(i,phi,pi,qi)
    

# for i in range(1<<10):
#     phi=n-((p_q<<BITS) + i)+1
#     d=pow(e,-1,phi)
#     m=pow(c,d,n)
#     print(long_to_bytes(m))